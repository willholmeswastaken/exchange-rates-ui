{"version":3,"sources":["components/global/Container.jsx","components/pages/Home.jsx","components/pages/Results.jsx","App.js","serviceWorker.js","index.js"],"names":["getWidth","window","Responsive","onlyTablet","minWidth","innerWidth","DesktopContainer","children","useState","fixed","setFixed","Visibility","once","onBottomPassed","onBottomPassedReverse","Segment","inverted","textAlign","style","padding","vertical","Menu","pointing","secondary","size","Container","Item","position","as","active","Button","primary","marginLeft","MobileContainer","sidebarOpened","setSidebarOpened","Sidebar","Pushable","maxWidth","onlyMobile","animation","onHide","visible","Pusher","dimmed","onClick","Icon","name","Home","mobile","history","useHistory","selectedCurrency","setSelectedCurrency","text","Header","content","fontSize","fontWeight","marginBottom","marginTop","Dropdown","placeholder","fluid","search","selection","onChange","ev","value","options","currencies","codes","map","c","push","Results","rates","setRates","isFetching","setIsFetching","hasFailed","setHasFailed","currency","useParams","useEffect","code","axios","get","config","CURRENCY_RATES_SERVICE_URL","then","res","includes","status","data","loading","length","Table","celled","Row","HeaderCell","Body","r","key","Cell","App","isMobile","Math","min","screen","width","height","paddingBottom","paddingLeft","Grid","divided","stackable","Column","path","List","link","role","aria-label","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e28ffc3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Responsive, Visibility, Segment, Menu, Container, Button, Sidebar, Icon } from 'semantic-ui-react';\n\n// Heads up!\n// We using React Static to prerender our docs with server side rendering, this is a quite simple solution.\n// For more advanced usage please check Responsive docs under the \"Usage\" section.\nconst getWidth = () => {\n    const isSSR = typeof window === 'undefined'\n\n    return isSSR ? Responsive.onlyTablet.minWidth : window.innerWidth\n}\n\n/* Heads up!\n * Neither Semantic UI nor Semantic UI React offer a responsive navbar, however, it can be implemented easily.\n * It can be more complicated, but you can create really flexible markup.\n */\nconst DesktopContainer = ({ children }) => {\n    const [fixed, setFixed] = useState(null);\n    return (\n        <Responsive getWidth={getWidth} minWidth={Responsive.onlyTablet.minWidth}>\n            <Visibility\n                once={false}\n                onBottomPassed={() => setFixed(true)}\n                onBottomPassedReverse={() => setFixed(false)}\n            >\n                <Segment\n                    inverted\n                    textAlign='center'\n                    style={{ padding: '1s0em' }}\n                    vertical\n                >\n                    <Menu\n                        fixed={fixed ? 'top' : null}\n                        inverted={!fixed}\n                        pointing={!fixed}\n                        secondary={!fixed}\n                        size='large'\n                    >\n                        <Container>\n                            <Menu.Item position='left'>\n                                ExchangeRates\n                            </Menu.Item>\n                            <Menu.Item as='a' active>\n                                Home\n                            </Menu.Item>\n                            <Menu.Item as='a'>Work</Menu.Item>\n                            <Menu.Item as='a'>Company</Menu.Item>\n                            <Menu.Item as='a'>Careers</Menu.Item>\n                            <Menu.Item position='right'>\n                                <Button as='a' inverted={!fixed}>\n                                    Log in\n                                </Button>\n                                <Button as='a' inverted={!fixed} primary={fixed} style={{ marginLeft: '0.5em' }}>\n                                    Sign Up\n                                </Button>\n                            </Menu.Item>\n                        </Container>\n                    </Menu>\n                </Segment>\n            </Visibility>\n\n            {children}\n        </Responsive>\n    )\n}\n\nDesktopContainer.propTypes = {\n    children: PropTypes.node,\n}\n\nconst MobileContainer = ({ children }) => {\n    const [ sidebarOpened, setSidebarOpened ] = useState(false);\n    return (\n        <Responsive\n            as={Sidebar.Pushable}\n            getWidth={getWidth}\n            maxWidth={Responsive.onlyMobile.maxWidth}\n        >\n            <Sidebar\n                as={Menu}\n                animation='push'\n                inverted\n                onHide={() => setSidebarOpened(false)}\n                vertical\n                visible={sidebarOpened}\n            >\n                <Menu.Item as='a' active>\n                    Home\n        </Menu.Item>\n                <Menu.Item as='a'>Work</Menu.Item>\n                <Menu.Item as='a'>Company</Menu.Item>\n                <Menu.Item as='a'>Careers</Menu.Item>\n                <Menu.Item as='a'>Log in</Menu.Item>\n                <Menu.Item as='a'>Sign Up</Menu.Item>\n            </Sidebar>\n\n            <Sidebar.Pusher dimmed={sidebarOpened}>\n                <Segment\n                    inverted\n                    textAlign='center'\n                    style={{ padding: '1em 0em' }}\n                    vertical\n                >\n                    <Container>\n                        <Menu inverted pointing secondary size='large'>\n                            <Menu.Item onClick={() => setSidebarOpened(true)}>\n                                <Icon name='sidebar' />\n                            </Menu.Item>\n                            <Menu.Item position='right'>\n                                <Button as='a' inverted>\n                                    Log in\n                </Button>\n                                <Button as='a' inverted style={{ marginLeft: '0.5em' }}>\n                                    Sign Up\n                </Button>\n                            </Menu.Item>\n                        </Menu>\n                    </Container>\n                </Segment>\n                {children}\n            </Sidebar.Pusher>\n        </Responsive>\n    )\n}\n\nMobileContainer.propTypes = {\n    children: PropTypes.node,\n}\n\nconst ResponsiveContainer = ({ children }) => (\n    <div>\n        <DesktopContainer>{children}</DesktopContainer>\n        <MobileContainer>{children}</MobileContainer>\n    </div>\n)\n\nResponsiveContainer.propTypes = {\n    children: PropTypes.node,\n}\n\nexport default {\n    DesktopContainer,\n    MobileContainer,\n    ResponsiveContainer\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport currencies from 'currency-codes';\nimport { useHistory } from \"react-router-dom\";\nimport { Container, Header, Dropdown, Button, Icon } from 'semantic-ui-react';\n\n/* eslint-disable react/no-multi-comp */\n/* Heads up! Home uses inline styling, however it's not the best practice. Use CSS or styled components for\n * such things.\n */\nconst Home = ({ mobile }) => {\n    const history = useHistory();\n    const [ selectedCurrency, setSelectedCurrency ] = useState(null);\n    return (\n        <Container text>\n            <Header\n                as='h1'\n                content='Select your currency'\n                inverted\n                style={{\n                    fontSize: mobile ? '2em' : '4em',\n                    fontWeight: 'normal',\n                    marginBottom: 0,\n                }}\n            />\n            <Header\n                as='h2'\n                content='We will then compare all the latest rates around the world!'\n                inverted\n                style={{\n                    fontSize: mobile ? '1.5em' : '1.7em',\n                    fontWeight: 'normal',\n                    marginTop: mobile ? '0.5em' : '1.5em',\n                }}\n            />\n            <Dropdown\n                placeholder='Select Currency'\n                fluid\n                search\n                selection\n                onChange={(ev, { name, value }) => setSelectedCurrency(value)}\n                options={currencies.codes().map(c => ({ text: c, value: c }))}\n            />\n            <Button primary size='huge' style={{ marginTop: mobile ? '0.5em' : '1.5em' }} onClick={() => history.push(`/results/${selectedCurrency}`)}>\n                Compare\n        <Icon name='right arrow' />\n            </Button>\n        </Container>\n    );\n}\n\nHome.propTypes = {\n    mobile: PropTypes.bool,\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport currencies from 'currency-codes'\nimport config from '../../config.json';\nimport {\n    useParams\n} from \"react-router-dom\";\nimport { Table, Segment } from 'semantic-ui-react';\n\nconst Results = () => {\n    const [rates, setRates] = useState([]);\n    const [isFetching, setIsFetching] = useState(true);\n    const [hasFailed, setHasFailed] = useState(false);\n    const { currency } = useParams();\n    useEffect(() => {\n        if (currencies.code(currency)) {\n            axios.get(`${config.CURRENCY_RATES_SERVICE_URL}/rates/${currency}`)\n                .then(res => {\n                    if ([200, 201, 204].includes(res.status)) {\n                        setRates(res.data.rates);\n                        setIsFetching(false);\n                        setHasFailed(false);\n                    } else {\n                        setIsFetching(false);\n                        setHasFailed(true);\n                    }\n                });\n        } else {\n            setIsFetching(false);\n            setHasFailed(true);\n        }\n    }, [currency]);\n\n    return (\n        <>\n            {\n                isFetching &&\n                <Segment loading>\n                </Segment>\n            }\n            {\n                hasFailed &&\n                <Segment>\n                    Failed\n            </Segment>\n            }\n            {\n                rates.length > 0 &&\n                <Table celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Currency</Table.HeaderCell>\n                            <Table.HeaderCell>Value</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n                        {\n                            rates.map(r => (\n                                <Table.Row key={r.name}>\n                                    <Table.Cell>{r.name}</Table.Cell>\n                                    <Table.Cell>{r.value}</Table.Cell>\n                                </Table.Row>\n                            ))\n                        }\n                    </Table.Body>\n                </Table>\n            }\n        </>\n    )\n}\n\nexport default Results;\n","import React from 'react'\nimport Containers from './components/global/Container'\nimport {\n  Container,\n  Grid,\n  Header,\n  List,\n  Segment,\n} from 'semantic-ui-react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css'\nimport Home from './components/pages/Home'\nimport Results from './components/pages/Results'\n\nconst App = () => {\n  const isMobile = Math.min(window.screen.width, window.screen.height) < 768;\n  return (\n    <Containers.ResponsiveContainer>\n      <Segment inverted vertical style={{ paddingBottom: isMobile ? '0em' : '32.8em', paddingLeft: isMobile ? '0em' : '5.5em' }} textAlign='center'>\n        <Container>\n          <Grid divided inverted stackable>\n            <Grid.Row>\n              <Grid.Column width={12}>\n                <Router>\n                  <Switch>\n                    <Route path=\"/results/:currency\">\n                      <Results />\n                    </Route>\n                    <Route path=\"/\">\n                      <Home mobile={isMobile} />\n                    </Route>\n                  </Switch>\n                </Router>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </Segment>\n      <Segment inverted vertical style={{ padding: '0em 0em' }}>\n        <Container>\n          <Grid divided inverted stackable>\n            <Grid.Row>\n              <Grid.Column width={3}>\n                <Header inverted as='h4' content='About' />\n                <List link inverted>\n                  <List.Item as='a'>Sitemap</List.Item>\n                  <List.Item as='a'>Contact Us</List.Item>\n                  <List.Item as='a'>Religious Ceremonies</List.Item>\n                  <List.Item as='a'>Gazebo Plans</List.Item>\n                </List>\n              </Grid.Column>\n              <Grid.Column width={3}>\n                <Header inverted as='h4' content='Services' />\n                <List link inverted>\n                  <List.Item as='a'>Banana Pre-Order</List.Item>\n                  <List.Item as='a'>DNA FAQ</List.Item>\n                  <List.Item as='a'>How To Access</List.Item>\n                  <List.Item as='a'>Favorite X-Men</List.Item>\n                </List>\n              </Grid.Column>\n              <Grid.Column width={7}>\n                <Header as='h4' inverted>\n                  Footer Header\n              </Header>\n                <p>\n                  Made with <span role=\"img\" aria-label=\"coffee\">☕</span> by Will Holmes\n              </p>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n      </Segment>\n    </Containers.ResponsiveContainer>\n  )\n};\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}